// Generated by Dagger (https://dagger.dev).
package com.c0de_h0ng.presentation.di;

import com.c0de_h0ng.data.datasource.RemoteDatSource;
import com.c0de_h0ng.domain.repository.GitHubRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideGitHubRepositoryFactory implements Factory<GitHubRepository> {
  private final Provider<RemoteDatSource> remoteProvider;

  public AppModule_ProvideGitHubRepositoryFactory(Provider<RemoteDatSource> remoteProvider) {
    this.remoteProvider = remoteProvider;
  }

  @Override
  public GitHubRepository get() {
    return provideGitHubRepository(remoteProvider.get());
  }

  public static AppModule_ProvideGitHubRepositoryFactory create(
      Provider<RemoteDatSource> remoteProvider) {
    return new AppModule_ProvideGitHubRepositoryFactory(remoteProvider);
  }

  public static GitHubRepository provideGitHubRepository(RemoteDatSource remote) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideGitHubRepository(remote));
  }
}
