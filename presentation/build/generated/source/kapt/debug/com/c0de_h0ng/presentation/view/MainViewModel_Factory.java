// Generated by Dagger (https://dagger.dev).
package com.c0de_h0ng.presentation.view;

import com.c0de_h0ng.domain.usecase.GetRxUserUseCase;
import com.c0de_h0ng.domain.usecase.GetUserUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetUserUseCase> getUserUseCaseProvider;

  private final Provider<GetRxUserUseCase> getRxUserUseCaseProvider;

  public MainViewModel_Factory(Provider<GetUserUseCase> getUserUseCaseProvider,
      Provider<GetRxUserUseCase> getRxUserUseCaseProvider) {
    this.getUserUseCaseProvider = getUserUseCaseProvider;
    this.getRxUserUseCaseProvider = getRxUserUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(getUserUseCaseProvider.get(), getRxUserUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GetUserUseCase> getUserUseCaseProvider,
      Provider<GetRxUserUseCase> getRxUserUseCaseProvider) {
    return new MainViewModel_Factory(getUserUseCaseProvider, getRxUserUseCaseProvider);
  }

  public static MainViewModel newInstance(GetUserUseCase getUserUseCase,
      GetRxUserUseCase getRxUserUseCase) {
    return new MainViewModel(getUserUseCase, getRxUserUseCase);
  }
}
